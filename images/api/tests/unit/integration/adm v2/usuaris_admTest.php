<?php
namespace ADM_V2;
require_once('app/api/adm/v2/init.php');
require_once('app/include/Auth.php');

class usuaris_admTest extends \Codeception\Test\Unit {
    public static $token;
    public static $id;
    public static $obj;

    public function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $_GET= [];
        $_SERVER = [
            "REMOTE_ADDR"=> "1.1.1.1"
        ];
    }

    public function generarTokenLogin($permisos) {

        $oAuth = new \Auth();
        $aDades = [
            'sessio' => '123456789012345678901234567890aa',
            'nom' => 'prova',
            'isAdmin' => isset($permisos['root']),
            'idApp' => 1,
            'idUsuari' => 1,
            'permisos'=> (object) $permisos,
            'debug' => 0
        ];

        return $oAuth::SignIn($aDades);
    }

    public function testAplicacionsAccioNoExisteix()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/@noexisteix";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $obj->callApi();
    }
    
    public function testAplicacionsGetAll()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0 );

        $kResult = array_keys($aResult['dades'][0]);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

    }

    public function testAplicacionsPost()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/";
        $_SERVER['REQUEST_METHOD'] = 'post';
        $aObj= [
            "obj" => [
                "nom" => "App",
                "url" => "http://prova/",
                "icona" => "home",
                "permisos" => [
                    "0" => [
                        "id" => 0,
                        "permis" => "Root",
                        "id_usuari" => 0

                    ],
                    "1" => [
                        "id" => 0,
                        "permis" => "Menus",
                        "id_usuari" => 0
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);
        self::$obj = $aResult['dades'];
        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

        self::$id=$aResult['dades']['id'];
        $this->tester->seeInDatabase('aplicacions', ['id' => self::$id,'nom' => $aObj['obj']['nom'],'url' => $aObj['obj']['url'],'icona' => $aObj['obj']['icona']]);

        $this->tester->seeInDatabase('permisos', ['id_aplicacio' => self::$id,'permis' => $aObj['obj']['permisos'][0]['permis']]);
        $this->tester->seeInDatabase('permisos', ['id_aplicacio' => self::$id,'permis' => $aObj['obj']['permisos'][1]['permis']]);
    }

    public function testAplicacionsGetById()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);
        
        $this->assertEquals(self::$obj,$aResult['dades']);
        $this->assertEquals(self::$id,$aResult['dades']['id']);
    }

    public function testAplicacionsPut()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "App 2",
                "url" => "http://prova/prova",
                "icona" => "home 2",
                "permisos" => [
                    "0" => [
                        "id" => self::$obj['permisos'][0]['id'],
                        "permis" => "Root 2"

                    ],
                    "1" => [
                        "id" => intval(self::$obj['permisos'][1]['id']) * -1,
                        "permis" => "Menus"
                    ],
                    "2" => [
                        "id" => 0,
                        "permis" => "New premis"
                    ]

                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

        $this->tester->seeInDatabase('aplicacions', ['id' => self::$id,'nom' => $aObj['obj']['nom'],'url' => $aObj['obj']['url'],'icona' => $aObj['obj']['icona']]);

        $this->tester->seeInDatabase('permisos', ['id'=> self::$obj['permisos'][0]['id'],'id_aplicacio' => self::$id,'permis' => $aObj['obj']['permisos'][0]['permis']]);
        $this->tester->dontSeeInDatabase('permisos', ['id'=> self::$obj['permisos'][1]['id'], 'id_aplicacio' => self::$id,'permis' => $aObj['obj']['permisos'][1]['permis']]);
        $this->tester->seeInDatabase('permisos', ['id_aplicacio' => self::$id,'permis' => $aObj['obj']['permisos'][2]['permis']]);

        self::$obj = $aResult['dades'];
    }

    public function testAplicacionsPutNoCoincideixenElsIds()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/222222";
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "App 2",
                "url" => "http://prova/prova",
                "icona" => "home 2",
                "permisos" => [
                    "0" => [
                        "id" => self::$obj['permisos'][0]['id'],
                        "permis" => "Root 2"

                    ],
                    "1" => [
                        "id" => intval(self::$obj['permisos'][1]['id']) * -1,
                        "permis" => "Menus"
                    ],
                    "2" => [
                        "id" => 0,
                        "permis" => "New premis"
                    ]

                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $this->expectExceptionCode(500);
        $this->expectExceptionMessage("Ids no coincideixen");

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);
    }

    public function testAplicacionsDelete()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="aplicacions/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'delete';

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();

        $this->tester->dontSeeInDatabase('aplicacions', ['id' => self::$id]);

        $this->tester->dontSeeInDatabase('permisos', ['id'=> self::$obj['permisos'][0]['id']]);
        $this->tester->dontSeeInDatabase('permisos', ['id'=> self::$obj['permisos'][1]['id']]);
    }

    public function testGrupsAccioNoExisteix()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/@noexisteix";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $obj->callApi();
    }

    public function testGrupsGetAll()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0 );

        $kResult = array_keys($aResult['dades'][0]);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

    }

    public function testGrupsPost()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/";
        $_SERVER['REQUEST_METHOD'] = 'post';
        $aObj= [
            "obj" => [
                "nom" => "Grup - el que sigui",
                "permisos" => [
                    "0" => [
                        "id_grup"=> 0,
                        "id_permis"=> 18,
                        "valor"=> 1
                    ],
                    "1" => [
                        "id_grup"=> 0,
                        "id_permis"=> 14,
                        "valor"=> 2
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);
        self::$obj = $aResult['dades'];
        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

        self::$id=$aResult['dades']['id'];
        $this->tester->seeInDatabase('grups', ['id' => self::$id,'nom' => $aObj['obj']['nom']]);

        $this->tester->seeInDatabase('grups_permisos', ['id_grup' => self::$id,'id_permis' => $aObj['obj']['permisos'][0]['id_permis'],'valor' => $aObj['obj']['permisos'][0]['valor']]);
        $this->tester->seeInDatabase('grups_permisos', ['id_grup' => self::$id,'id_permis' => $aObj['obj']['permisos'][1]['id_permis'],'valor' => $aObj['obj']['permisos'][1]['valor']]);
    }

    public function testGrupsGetById()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertEquals(self::$obj,$aResult['dades']);
        $this->assertEquals(self::$id,$aResult['dades']['id']);
    }

    public function testGrupsPut()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "Grup modificat",
                "permisos" => [
                    "0" => [
                        "id" => self::$obj['permisos'][0]['id'],
                        "id_permis"=> 18,
                        "valor"=> 3

                    ],
                    "1" => [
                        "id" => intval(self::$obj['permisos'][1]['id']) * -1,
                        "id_permis"=> 14,
                        "valor"=> 2
                    ],
                    "2" => [
                        "id" => 0,
                        "id_permis"=> 1,
                        "valor"=> 25
                    ]

                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);

        $this->tester->seeInDatabase('grups', ['id' => self::$id,'nom' => $aObj['obj']['nom']]);

        $this->tester->seeInDatabase('grups_permisos', [
                                                            'id'=> self::$obj['permisos'][0]['id'],
                                                            'id_grup' => self::$id,
                                                            'id_permis' => $aObj['obj']['permisos'][0]['id_permis'],
                                                            'valor' => $aObj['obj']['permisos'][0]['valor']
                                                        ]);
        $this->tester->dontSeeInDatabase('grups_permisos', ['id'=> self::$obj['permisos'][1]['id']]);
        $this->tester->seeInDatabase('grups_permisos', ['id_grup' => self::$id,'id_permis' => $aObj['obj']['permisos'][2]['id_permis'],'valor' => $aObj['obj']['permisos'][2]['valor']]);

        self::$obj = $aResult['dades'];
    }

    public function testGrupsPutNoCoincideixenElsIds()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/222222";
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "Grup modificat",
                "permisos" => [
                    "0" => [
                        "id" => self::$obj['permisos'][0]['id'],
                        "id_permis"=> 18,
                        "valor"=> 3

                    ],
                    "1" => [
                        "id" => intval(self::$obj['permisos'][1]['id']) * -1,
                        "id_permis"=> 14,
                        "valor"=> 2
                    ],
                    "2" => [
                        "id" => 0,
                        "id_permis"=> 1,
                        "valor"=> 25
                    ]

                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $this->expectExceptionCode(500);
        $this->expectExceptionMessage("Ids no coincideixen");

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "permisos"
        ];
        $this->assertEquals($expected,$kResult);
    }

    public function testGrupsDelete()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="grups/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'delete';

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();

        $this->tester->dontSeeInDatabase('grups', ['id' => self::$id]);

        $this->tester->dontSeeInDatabase('grups_permisos', ['id'=> self::$obj['permisos'][0]['id']]);
        $this->tester->dontSeeInDatabase('grups_permisos', ['id'=> self::$obj['permisos'][1]['id']]);
    }

    public function testUsuarisGetAll()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0 );

        $kResult = array_keys($aResult['dades'][0]);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "usuari",
            "grups"
        ];
        $this->assertEquals($expected,$kResult);

    }

    public function testUsuarisPost()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/";
        $_SERVER['REQUEST_METHOD'] = 'post';
        $aObj= [
            "obj" => [
                "nom" => "prova phpunit",
                "usuari"=> "prova_phpunit",
                "password"=> "b46dc1e73331bf7a5b14348a6f8416ce",
                "grups" => [
                    "0" => [
                        "id_grup"=> 1,
                    ],
                    "1" => [
                        "id_grup"=> 2,
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);
        self::$obj = $aResult['dades'];
        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "usuari",
            "password",
            "data_add",
            "data_mod",
            "data_baixa",
            "grups"
        ];
        $this->assertEquals($expected,$kResult);

        self::$id=$aResult['dades']['id'];
        $this->tester->seeInDatabase('usuaris',
            [
                'id' => self::$id,
                'nom' => $aObj['obj']['nom'],
                'usuari' => $aObj['obj']['usuari'],
                'password' => md5($aObj['obj']['password'].$aObj['obj']['password']),
            ]);

        $this->tester->seeInDatabase('usuaris_grups',
            [
                'id_usuari' => self::$id,
                'id_grup' => $aObj['obj']['grups'][0]['id_grup'],
            ]
        );
        $this->tester->seeInDatabase('usuaris_grups',
            [
                'id_usuari' => self::$id,
                'id_grup' => $aObj['obj']['grups'][1]['id_grup'],
            ]
        );
    }

    public function testUsuarisPostUsuariExisteix()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/";
        $_SERVER['REQUEST_METHOD'] = 'post';
        $aObj= [
            "obj" => [
                "nom" => "prova phpunit",
                "usuari"=> "prova_phpunit",
                "password"=> "b46dc1e73331bf7a5b14348a6f8416ce",
                "grups" => [
                    "0" => [
                        "id_grup"=> 1,
                    ],
                    "1" => [
                        "id_grup"=> 2,
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $this->expectExceptionCode(500);
        $this->expectExceptionMessage("L'usuari ja existeix");

        $aResultJson = $obj->callApi();

    }

    public function testUsuarisGetById()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertEquals(self::$obj,$aResult['dades']);
        $this->assertEquals(self::$id,$aResult['dades']['id']);
    }

    public function testUsuarisPutSensePassword()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "prova phpunit 2",
                "usuari"=> "prova_phpunit_2",
                "password"=> "",
                "grups" => [
                    "0" => [
                        "id" => self::$obj['grups'][1]['id'],
                        "id_grup"=> 10,
                    ],
                    "1" => [
                        "id" => self::$obj['grups'][1]['id'],
                        "id_grup"=> 2,
                    ],

                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "usuari",
            "password",
            "data_add",
            "data_mod",
            "data_baixa",
            "grups"
        ];
        $this->assertEquals($expected,$kResult);

        $this->tester->seeInDatabase('usuaris',
            [
                'id' => self::$id,
                'nom' => $aObj['obj']['nom'],
                'usuari' => self::$obj['usuari'],
                'password !=' => '',
            ]);

        $this->tester->seeInDatabase('usuaris_grups',
            [
                "id" => self::$obj['grups'][0]['id'],
                'id_usuari' => self::$id,
                'id_grup' => self::$obj['grups'][0]['id_grup'],
            ]
        );
        $this->tester->seeInDatabase('usuaris_grups',
            [
                "id" => self::$obj['grups'][1]['id'],
                'id_usuari' => self::$id,
                'id_grup' => self::$obj['grups'][1]['id_grup'],
            ]
        );


        self::$obj = $aResult['dades'];
    }

    public function testUsuarisPut()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "prova phpunit 2",
                "usuari"=> "prova_phpunit_2",
                "password"=> "191986b6ad39d07397922ca8dbe01b17",
                "grups" => [
                    "0" => [
                        "id" => self::$obj['grups'][1]['id'],
                        "id_grup"=> 10,
                    ],
                    "1" => [
                        "id" => intval(self::$obj['grups'][1]['id']) * -1,
                        "id_grup"=> 2,
                    ],
                    "2" => [
                        "id" => 0,
                        "id_grup"=> 5,
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "usuari",
            "password",
            "data_add",
            "data_mod",
            "data_baixa",
            "grups"
        ];
        $this->assertEquals($expected,$kResult);

        $this->tester->seeInDatabase('usuaris',
            [
                'id' => self::$id,
                'nom' => $aObj['obj']['nom'],
                'usuari' => self::$obj['usuari'],
                'password' => md5($aObj['obj']['password'].$aObj['obj']['password']),
            ]);

        $this->tester->seeInDatabase('usuaris_grups',
            [
                "id" => self::$obj['grups'][0]['id'],
                'id_usuari' => self::$id,
                'id_grup' => self::$obj['grups'][0]['id_grup'],
            ]
        );
        $this->tester->dontSeeInDatabase('usuaris_grups',
            [
                "id" => self::$obj['grups'][1]['id'],
                'id_usuari' => self::$id,
                'id_grup' => $aObj['obj']['grups'][1]['id_grup'],
            ]
        );

        $this->tester->seeInDatabase('usuaris_grups',
            [
                'id_usuari' => self::$id,
                'id_grup' => $aObj['obj']['grups'][2]['id_grup'],
            ]
        );

        self::$obj = $aResult['dades'];
    }

    public function testUsuarisPutNoCoincideixenElsIds()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/222222";
        $_SERVER['REQUEST_METHOD'] = 'put';
        $aObj= [
            "obj" => [
                "id" => self::$id,
                "nom" => "prova phpunit 2",
                "usuari"=> "prova_phpunit_2",
                "password"=> "191986b6ad39d07397922ca8dbe01b17",
                "grups" => [
                    "0" => [
                        "id" => self::$obj['grups'][1]['id'],
                        "id_grup"=> 10,
                    ],
                    "1" => [
                        "id" => intval(self::$obj['grups'][1]['id']) * -1,
                        "id_grup"=> 2,
                    ],
                    "2" => [
                        "id" => 0,
                        "id_grup"=> 5,
                    ]
                ]
            ]
        ];
        $aJsonObj = json_encode($aObj,JSON_NUMERIC_CHECK);

        $this->expectExceptionCode(500);
        $this->expectExceptionMessage("Ids no coincideixen");

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true, 'getDadesInput' => $aJsonObj]);

        $aResultJson = $obj->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id",
            "nom",
            "url",
            "icona",
            "grups"
        ];
        $this->assertEquals($expected,$kResult);
    }

    public function testUsuarisDelete()
    {
        $token = $this->generarTokenLogin(['root' => ""]);

        $vEntrada="usuaris/".self::$id;
        $_SERVER['REQUEST_METHOD'] = 'delete';

        $obj = $this->construct( 'ADM_V2\init', [$vEntrada], ['getHeaderToken' => $token, 'ValidateToken' => true]);

        $aResultJson = $obj->callApi();

        $this->tester->dontSeeInDatabase('usuaris', ['id' => self::$id]);

        $this->tester->dontSeeInDatabase('usuaris_grups', ['id'=> self::$obj['grups'][0]['id']]);
        $this->tester->dontSeeInDatabase('usuaris_grups', ['id'=> self::$obj['grups'][1]['id']]);
    }
}

