<?php
namespace PUB_V3;

require_once('app/api/pub/v3/init.php');

class usuaris_pubTest extends \Codeception\Test\Unit {
    public static $token;

    public function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $_GET= [];
        $_SERVER = [];
    }

    public function testUsuarisAccioNoExisteix()
    {
        $vEntrada="usuaris/@noexisteix";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $usuaris = new init($vEntrada);

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Url mal formada");

        $usuaris->callApi();
    }

    public function testUsuarisAccioLogin()
    {
        $vEntrada="usuaris/@login";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
            ];

        $_GET = [
            "usuari" => "ajtadmin",
            "contrasenya" => "a3c0ed1b243830c09fbb0092fa931a5a",
            "idApp" => 1,
            "debug" => 0
        ];

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);
        self::$token = $aResult['dades']['token'];
        $this->assertTrue(isset( $aResult['dades']['token']) && $aResult['dades']['token'] != '');
    }

    public function testUsuarisAccioLoginNoParams()
    {
        $this->expectExceptionCode(401);
        $this->expectExceptionMessage("Usuari o contrasenya incorrecte");

        $vEntrada="usuaris/@login";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $usuaris = new init($vEntrada);

        $usuaris->callApi();
    }

    public function testUsuarisAccioLoginSenseIdApp()
    {
        $vEntrada="usuaris/@login";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [
            "usuari" => "ajtadmin",
            "contrasenya" => "a3c0ed1b243830c09fbb0092fa931a5a",
            "debug" => 0
        ];

        $this->expectExceptionCode(403);
        $this->expectExceptionMessage("No tens permís");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testUsuarisAccioLoginUsuariNoExisteix()
    {
        $vEntrada="usuaris/@login";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [
            "usuari" => "ajtadm",
            "contrasenya" => "a3c0ed1b243830c09fbb0092fa931a5a",
            "idApp" => 1,
            "debug" => 0
        ];

        $this->expectExceptionCode(401);
        $this->expectExceptionMessage("Usuari o contrasenya incorrecte");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();

    }

    public function testUsuarisAccioLoginUsuariNoTePermis()
    {
        $vEntrada="usuaris/@login";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [
            "usuari" => "prova",
            "contrasenya" => "189bbbb00c5f1fb7fba9ad9285f193d1",
            "idApp" => 3,
            "debug" => 0
        ];

        $this->expectExceptionCode(403);
        $this->expectExceptionMessage("No tens permís");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();

    }

    public function testUsuarisAccioValidarTokenSenseToken()
    {
        $vEntrada="usuaris/@validarToken";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(401);
        $this->expectExceptionMessage("Requereix token");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();

    }

    public function testUsuarisAccioValidarTokenIncorrecte()
    {
        $vEntrada="usuaris/@validarToken";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(403);

        $usuaris = $this->construct( 'PUB_V3\init', [$vEntrada], ['getHeaderToken' => 'qqqqqqqqq']);

        $aResultJson = $usuaris->callApi();

    }

    public function testUsuarisAccioValidarToken()
    {
        $vEntrada="usuaris/@validarToken";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $usuaris = $this->construct( 'PUB_V3\init', [$vEntrada], ['getHeaderToken' => self::$token]);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);
        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0);

    }

    public function testUsuarisAccioValidar()
    {
        $vEntrada="usuaris/@validar";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $usuaris = $this->construct( 'PUB_V3\init', [$vEntrada], ['getHeaderToken' => self::$token]);

        $aResultJson = $usuaris->callApi();

        $aResult = json_decode($aResultJson,true);
        $this->assertTrue(isset($aResult['dades']['token']) && ($aResult['dades']['token']) != '' );

    }

    public function testUsuarisAccioLoginToken()
    {
        $vEntrada="usuaris/@loginToken";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [
            "idApp" => 2
        ];

        $usuaris = $this->construct( 'PUB_V3\init', [$vEntrada], ['getHeaderToken' => self::$token]);

        $aResultJson = $usuaris->callApi();

        $aResult = json_decode($aResultJson,true);
        $this->assertTrue(isset($aResult['dades']['token']) && ($aResult['dades']['token']) != '' );

    }

    public function testUsuarisAccioLoginTokenSensePermis()
    {
        $vEntrada="usuaris/@loginToken";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [
            "idApp" => 5
        ];

        $this->expectExceptionCode(403);
        $this->expectExceptionMessage("No tens permís");

        $usuaris = $this->construct( 'PUB_V3\init', [$vEntrada], ['getHeaderToken' => self::$token]);

        $aResultJson = $usuaris->callApi();
    }

    public function testUsuarisGet()
    {
        $vEntrada="usuaris/";
        $_SERVER = [
            "REQUEST_METHOD" => 'get',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testUsuarisPost()
    {
        $vEntrada="usuaris/";
        $_SERVER = [
            "REQUEST_METHOD" => 'post',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testUsuarisPut()
    {
        $vEntrada="usuaris/1";
        $_SERVER = [
            "REQUEST_METHOD" => 'put',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testUsuarisDelete()
    {
        $vEntrada="usuaris/1";
        $_SERVER = [
            "REQUEST_METHOD" => 'delete',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testAplicacionsAccioNoExisteix()
    {
        $vEntrada="aplicacions/@noexisteix";
        $_SERVER['REQUEST_METHOD'] = 'get';
        $_GET=[];

        $usuaris = new init($vEntrada);

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris->callApi();
    }

    public function testAplicacionsGetAplicacioId()
    {
        $vEntrada="aplicacions/1";
        $_SERVER = [
            'REQUEST_METHOD' => 'get',
            'HTTP_HOST' => "api.local",
            'REQUEST_URI' => "/api/usuaris/pub/v3/".$vEntrada
        ];
        $_GET=[
            "nocache" => 1
        ];

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);

        $kResult = array_keys($aResult['dades']);

        //esperem que torni aquests camps
        $expected = [
            "id_aplicacio",
            "nom_aplicacio",
            "url",
            "icona"
        ];
        $this->assertEquals($expected,$kResult);
        $this->assertEquals(1,$aResult['dades']['id_aplicacio']);
    }

    public function testAplicacionsGetAplicacioNoExisteix()
    {
        $vEntrada="aplicacions/199999";
        $_SERVER = [
            'REQUEST_METHOD' => 'get',
            'HTTP_HOST' => "api.local",
            'REQUEST_URI' => "/api/usuaris/pub/v3/".$vEntrada
        ];
        $_GET=[
            "nocache" => 1
        ];

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) == 0 );
    }

    public function testAplicacionsGetAplicacioByIdUsuari()
    {
        $vEntrada="usuaris/1/aplicacions/";
        $_SERVER = [
            'REQUEST_METHOD' => 'get',
            'HTTP_HOST' => "api.local",
            'REQUEST_URI' => "/api/usuaris/pub/v3/".$vEntrada
        ];
        $_GET=[
            "nocache" => 1
        ];

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0 );

        $kResult = array_keys($aResult['dades'][0]);

        //esperem que torni aquests camps
        $expected = [
            "id_aplicacio",
            "nom_aplicacio",
            "url",
            "icona"
        ];

        $this->assertEquals($expected,$kResult);
    }

    public function testAplicacionsGetAllAplicacions()
    {
        $vEntrada="aplicacions/";
        $_SERVER = [
            'REQUEST_METHOD' => 'get',
            'HTTP_HOST' => "api.local",
            'REQUEST_URI' => "/api/usuaris/pub/v3/".$vEntrada
        ];
        $_GET=[
            "nocache" => 1
        ];

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
        $aResult = json_decode($aResultJson,true);

        $this->assertTrue(isset($aResult['dades']) && sizeof($aResult['dades']) > 0 );

        $kResult = array_keys($aResult['dades'][0]);

        //esperem que torni aquests camps
        $expected = [
            "id_aplicacio",
            "nom_aplicacio",
            "url",
            "icona"
        ];

        $this->assertEquals($expected,$kResult);
    }

    public function testAplicacionsPost()
    {
        $vEntrada="aplicacions/";
        $_SERVER = [
            "REQUEST_METHOD" => 'post',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testAplicacionsPut()
    {
        $vEntrada="aplicacions/1";
        $_SERVER = [
            "REQUEST_METHOD" => 'put',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }

    public function testAplicacionsDelete()
    {
        $vEntrada="aplicacions/1";
        $_SERVER = [
            "REQUEST_METHOD" => 'delete',
            "REMOTE_ADDR" => '1.1.1.1',
        ];

        $_GET = [];

        $this->expectExceptionCode(405);
        $this->expectExceptionMessage("Mètode no definit");

        $usuaris = new init($vEntrada);

        $aResultJson = $usuaris->callApi();
    }
}

